openapi:  3.0.3
info: 
  title: Wasa Photo - OpenAPI
  description: |
    API for sharing photos.
    
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time) and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows). Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any image (even those uploaded by themself). Only authors can remove their comments. Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about Alice. Alice can decide to remove the ban at any moment. Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse chronological order), how many photos have been uploaded, and the user’s followers and following. Users can change their usernames, upload photos, remove photos, and follow/unfollow other users. Removal of an image will also remove likes and comments.
      A user can search other user profiles via username
  version: 1.0.1

 
      
components:

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  parameters:

    username:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 3
        maxLength: 16
      name: username
      in: path
      required: true
      description: username for users    
       
    
  responses: 
    UnauthorizedStatus:
      description: requester is not authorized or access token is not valid or expired
    BadRequestError:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.  
    NotFoundError:
      description: the requesting data is not found
    StatusForbidden:
      description: not allowed to visit
    
    
  schemas:
  
    User:
      title: User
      description: this objects represents a single user
      type: object
      properties:
        uid:
          description: identifier of the user
          type: integer
          format: int64
          example: 999
        username:
          description: username for users
          type: string
          example: SiweiHu
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          readOnly: false
        password:
          description: username for users
          type: string
          example: abcde
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          readOnly: false
      
        
    
            
          
          
tags:

  - name: user
    description: Operations about user          
          
          
    
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: Username for the user to be logged in or signed up
                  type: string
                  example: SiweiHu
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
                password:
                  description: Password for the user
                  type: string
                  example: SecretPass123
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
              
        required: true
      responses:
        '201':
          description: User signed-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '200':
          description: user log-in seccessfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }            
      

              
              
              
              
              
              
              
                
              
              
# 